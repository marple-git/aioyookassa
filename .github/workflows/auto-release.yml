name: Auto Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  auto-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run tests
      run: poetry run pytest tests/ -v

    - name: Check if version changed
      id: version-check
      run: |
        CURRENT_VERSION=$(poetry version --short)
        echo "Current version: $CURRENT_VERSION"
        
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Check if current version is different from latest tag
        if [ "v$CURRENT_VERSION" != "$LATEST_TAG" ]; then
          echo "Version changed from $LATEST_TAG to v$CURRENT_VERSION"
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "new_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Version unchanged: $CURRENT_VERSION"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Create and push tag
      if: steps.version-check.outputs.version_changed == 'true'
      run: |
        NEW_VERSION="${{ steps.version-check.outputs.new_version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        git push origin "$NEW_VERSION"

    - name: Build package
      if: steps.version-check.outputs.version_changed == 'true'
      run: poetry build

    - name: Publish to PyPI
      if: steps.version-check.outputs.version_changed == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true

    - name: Create GitHub Release
      if: steps.version-check.outputs.version_changed == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version-check.outputs.new_version }}
        release_name: Release ${{ steps.version-check.outputs.new_version }}
        draft: false
        prerelease: false

